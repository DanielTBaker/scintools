Dynspec class
=============

The scintools ``Dynspec`` class features tools for processing and plotting dynamic spectra, as well as computing corresponding autocorrelation functions, secondary spectra and physical scattered images, and fitting data to physical models.

.. raw:: html

	<em class="property">class </em><code class="descclassname">scintools.</code><code class="descname">Dynspec</code><span class="sig-paren">(</span><em>filename=None, dyn=None, verbose=True, process=True, lamsteps=False</em><span class="sig-paren">)</span>

\
		Dynamic spectrum class.

		**Parameters:** 
				*   **filename** (`str`) - `psrflux`-format filename of the dynamic spectrum.
				*   **dyn** (`dynspec object`) - compatable dynamic spectrum object.
				*   **process** (`bool, optional`) - perform default processing. Involves trimming the edges, refilling, correction, and calculation of the ACF and secondary spectrum. If lamsteps is True, also scales the dynamic spectrum.
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **verbose** (`bool, optional`) - print dynamic spectrum information.

Importing dynamic spectra
-------------------------

A Dynspec object can be loaded from a `psrflux`-format dynamic spectrum, a simulation object from either the Simulation class or from Matlab code by Coles *et al*. (2010), or a custom object.

.. raw:: html

	<code class="descname">load_file</code><span class="sig-paren">(</span><em>filename, process=True, lamsteps=False, verbose=True</em><span class="sig-paren">)</span>

\

		Load a dynamic spectrum from `psrflux`-format file

		**Parameters:** 
				*   **filename** (`str`) - `psrflux`-format filename of the dynamic spectrum.
				*   **process** (`bool, optional`) - perform default processing. Involves trimming the edges, refilling, correction, and calculation of the ACF and secondary spectrum. If lamsteps is True, also scales the dynamic spectrum.
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **verbose** (`bool, optional`) - print dynamic spectrum information.

.. raw:: html

	<code class="descname">load_dyn_obj</code><span class="sig-paren">(</span><em>dyn, process=True, lamsteps=False, verbose=True</em><span class="sig-paren">)</span>

\

		Load in a dynamic spectrum object of different type.

		**Parameters:** 
				*   **dyn** (`dynspec object`) - compatable dynamic spectrum object.
				*   **process** (`bool, optional`) - perform default processing. Involves trimming the edges, refilling, correction, and calculation of the ACF and secondary spectrum. If lamsteps is True, also scales the dynamic spectrum.
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **verbose** (`bool, optional`) - print dynamic spectrum information.

Processing
----------

The dynamic spectrum can be cleaned, cropped, normalised, and resampled in several ways.

.. raw:: html

	<code class="descname">cut_dyn</code><span class="sig-paren">(</span><em>tcuts=0, fcuts=0, lamsteps=False, plot=False, maxfdop=np.inf, display=True, figsize=(8, 13), filename=None</em><span class="sig-paren">)</span>

\

		Cuts the dynamic spectrum into (tcuts + 1) segments in time and (fcuts + 1) segments in frequency.

		**Parameters:** 
				*   **tcuts** (`int`) - number of cuts along the time axis. Produces (tcuts + 1) segments.
				*   **fcuts** (`int`) - number of cuts along the frequency axis. Produces (fcuts + 1) segments.
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **plot** (`bool, optional`) - plots cut dynamic spectrum and resulting ACF and secondary spectrum in subplot.
				*   **maxfdop** (`float, optional`) - maximum extent in doppler freqency to plot the secondary spectrum.
				*   **display** (`bool, optional`) - option to display plot.
				*   **figsize** (`tuple, optional`) - subplot figure size.
				*   **filename** (`str, optional`) - filename for saving the plots.

.. raw:: html

	<code class="descname">trim_edges</code><span class="sig-paren">(</span><span class="sig-paren">)</span>

\

		Finds and removes the band edges.

.. raw:: html

	<code class="descname">zap</code><span class="sig-paren">(</span><em>method='median', sigma=7, m=3</em><span class="sig-paren">)</span>

\

		Basic zapping of dynamic spectrum.

		**Parameters:** 
				*   **method** (`{'median', medfilt}, str, optional`) - method for zapping the dynamic spectrum. 'median' selects indices based on the median of the array while 'medfilt' uses the ``scipy.signal.medfilt`` method.
				*   **sigma** (`float, optional`) - pixel value selection threshold.
				*   **m** (`int, optional`) - kernel size for ``medfilt`` method.

.. raw:: html

	<code class="descname">refill</code><span class="sig-paren">(</span><em>linear=True, zeros=True</em><span class="sig-paren">)</span>

\

        	Replaces the nan values in array. Also replaces zeros by default.

		**Parameters:** 
				*   **linear** (`bool, optional`) - choose whether to perform linear interpolation.
				*   **zeros** (`bool, optional`) - choose whether to replace the zeros in the array.

.. raw:: html

	<code class="descname">correct_dyn</code><span class="sig-paren">(</span><em>svd=True, nmodes=1, frequency=False, time=True, lamsteps=False, nsmooth=5</em><span class="sig-paren">)</span>

\

        	Correct for gain variations in time and frequency.

		**Parameters:** 
				*   **svd** (`bool, optional`) - choose whether to compute a singular-value decomposition model of the dynamic spectrum using the ``scint_utils`` function ``svd_model``.
				*   **nmodes** (`int, optional`) - number of singular values to compute up to.
				*   **frequency** (`bool, optional`) - compute model using mean along frequency values.
				*   **time** (`bool, optional`) - compute model using mean along time values.
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **nsmooth** (`int, optional`) - length of the filter window (i.e. the number of coefficients) for applying ``scipy.signal.savgol_filter`` to mean data. If used, must be a positive odd integer.

.. raw:: html

	<code class="descname">crop_dyn</code><span class="sig-paren">(</span><em>fmin=0, fmax=np.inf, tmin=0, tmax=np.inf</em><span class="sig-paren">)</span>

\

        	Crop dynamic spectrum in frequency and time.

		**Parameters:** 
				*   **fmin** (`float, optional`) - minimum extent in frequency to crop at.
				*   **fmax** (`float, optional`) - maximum extent in frequency to crop at.
				*   **tmin** (`float, optional`) - minimum extent in time to crop at.
				*   **tmax** (`float, optional`) - maximum extent in time to crop at.

.. raw:: html

	<code class="descname">scale_dyn</code><span class="sig-paren">(</span><em>scale='lambda', window='hanning', window_frac=0.1</em><span class="sig-paren">)</span>

\

        	Crop dynamic spectrum in frequency and time.

		**Parameters:** 
				*   **scale** (`{'factor', 'lambda', 'trapezoid'}, str, optional`) - scaling method.
				*   **window** (`{'hanning', 'hamming', 'blackman', 'bartlett'}, str, optional`) - numpy windowing method.
				*   **window_frac** (`float, optional`) - windowing fraction.

.. raw:: html

	<code class="descname">default_processing</code><span class="sig-paren">(</span><em>lamsteps=False</em><span class="sig-paren">)</span>

\

		Runs all the above processing methods with default parameters as well as calculating the ACF and secondary spectrum. 

		**Parameters:** 
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps. If True, scales the dynamic spectrum.


Basic plotting
--------------
.. raw:: html

	<code class="descname">plot_dyn</code><span class="sig-paren">(</span><em>lamsteps=False, trap=False, input_dyn=None, input_x=None, input_y=None, filename=None, display=True</em><span class="sig-paren">)</span>

\

        	Plot the dynamic spectrum

		**Parameters:** 
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps. If True, scales the dynamic spectrum.
				*   **trap** (`bool, optional`) - option to use trapezoidal dynamic spectrum.
				*   **input_dyn** (`numpy 2D array, optional`) - input dynamic spectrum rather than using currently initialized one.
				*   **input_x** (`list or numpy 1D array, optional`) - time axis of the input dynamic spectrum.
				*   **input_y** (`list or numpy 1D array, optional`) - frequency or wavelength axis of the input dynamic spectrum.
				*   **filename** (`str, optional`) - filename to save the plot as. If None then plot is not saved.
				*   **display** (`bool, optional`) - option to display the plot.

Autocorrelation function (ACF)
------------------------------
The autocorrelation function of the dynamic spectrum can be calculated and analysed in several ways.

.. raw:: html

	<code class="descname">calc_acf</code><span class="sig-paren">(</span><em>scale=False, input_dyn=None, plot=True</em><span class="sig-paren">)</span>

\

        	Calculate the autocorrelation function

		**Parameters:** 
				*   **scale** (`bool, optional`) - 
				*   **input_dyn** (`numpy 2D array, optional`) - input dynamic spectrum rather than using currently initialized one.
				*   **plot** (`bool, optional`) - option to plot the ACF.

.. raw:: html

	<code class="descname">get_scint_params</code><span class="sig-paren">(</span><em>method="acf1d", alpha=5/3, nscale=3, mcmc=False, plot=False, full_frame=False, display=True</em><span class="sig-paren">)</span>

\

        	Calculates the characteristic frequency and time scales, :math:`\Delta\nu` and :math:`\tau_\text{d}`, of the ACF.

		**Parameters:** 
				*   **method** (`{'acf1d, 'acf2d_approx', 'acf2d', 'sspec'}, optional`) - method used to compute the model to fit to the ACF. 'acf1d' fits a 1D model through the center of the ACF in both axes, 'acf2d_approx' fits an approximate 2D model, 'acf2d' fits an analytical 2D model and is significantly slower, and 'sspec' fits a model based on the secondary spectrum. 
				*   **alpha** (`float, optional`) - exponent used in the exponential term of the 1D and approxmate 2D models. 5/3 is a Kolmogorov profile (default) while 2 is Gaussian. If no value is given, the model treats it as a parameter to fit.
				*   **nscale** (`float, optional`) - the number of frequency and time scales, initially computed using the 1D model, to compute over. Crops the frame to more reliably fit a 2D model. If larger than the frame it is automatically lowered.
				*   **mcmc** (`bool, optional`) - perform an additional Markov Chain-Monte Carlo algorithm using the fit parameters from the standard models as initial guesses.
				*   **plot** (`bool, optional`) - plots the ACF, the fitted model, and the residuals.
				*   **full_frame** (`bool, optional`) - plots the entire frames of the 2D model fitting. If False, plots the cropped frames.
				*   **display** (`bool, optional`) - option to display the plot.

.. raw:: html

	<code class="descname">get_acf_tilt</code><span class="sig-paren">(</span><em>tmax=None, fmax=None, plot=False</em><span class="sig-paren">)</span>

\

        	Calculate the tilt of the ACF

		**Parameters:** 
				*   **tmax** (`float, optional`) - maximum extent in time to find the peak power. If None then taken to be one third of the characteristic time scale determined by ``get_scint_params()``.
				*   **fmax** (`float, optional`) - maximum extent in frequency to find the peak power. If None then taken to be one fifth of the decorrelation frequency scale determined by ``get_scint_params()``.
				*   **plot** (`bool, optional`) - option to plot the ACF with a fitted slope line.

.. raw:: html

	<code class="descname">plot_acf</code><span class="sig-paren">(</span><em>fit=True, method='acf1d', alpha=5/3, nscale=3, contour=False, input_acf=None, input_t=None, input_f=None, mcmc=False, filename=None, display=True</em><span class="sig-paren">)</span>

\

        	Plot the autocorrelation function

		**Parameters:**
				*   **fit** (`bool, optional`) - fits a model to the ACF using ``get_scint_params()``.  
				*   **method** (`{'acf1d, 'acf2d_approx', 'acf2d', 'sspec'}, optional`) - method used to compute the model to fit to the ACF. 'acf1d' fits a 1D model through the center of the ACF in both axes, 'acf2d_approx' fits an approximate 2D model, 'acf2d' fits an analytical 2D model and is significantly slower, and 'sspec' fits a model based on the secondary spectrum.
				*   **alpha** (`float, optional`) - exponent used in the exponential term of the 1D and approxmate 2D models. 5/3 is a Kolmogorov profile (default) while 2 is Gaussian. If no value is given, the model treats it as a parameter to fit.
				*   **nscale** (`float, optional`) - the number of frequency and time scales, initially computed using the 1D model, to compute over. Crops the frame to more reliably fit a 2D model. If larger than the frame it is automatically lowered.
				*   **contour** (`bool, optional`) - overlay contours
				*   **input_acf** (`numpy 2D array, optional`) - input ACF rather than using currently initialized one.
				*   **input_t** (`numpy 1D array, optional`) - input time axis.
				*   **input_f** (`numpy 1D array, optional`) - input frequency axis.
				*   **mcmc** (`bool, optional`) - perform an additional Markov Chain-Monte Carlo algorithm using the fit parameters from the standard models as initial guesses.
				*   **filename** (`str, optional`) - filename to save the plot as. If None then plot is not saved.
				*   **display** (`bool, optional`) - option to display the plot.

Secondary spectra
-----------------
The secondary spectrum of the dynamic spectrum can be calculated and analysed in several ways.

.. raw:: html

	<code class="descname">calc_sspec</code><span class="sig-paren">(</span><em>prewhite=True, halve=True, lamsteps=False, input_dyn=None, input_x=None, input_y=None, trap=False, window='blackman', window_frac=0.1, plot=False</em><span class="sig-paren">)</span>

\

        	Calculate the secondary spectrum

		**Parameters:**
				*   **prewhite** (`bool, optional`) - apply pre-whitening and post-darkening.
				*   **halve** (`bool, optional`) - crop the secondary spectrum to positive :math:`f_\tau` or :math:`f_\lambda`. Removes the negative-curvature counterpart arc in the bottom half of the spectrum.  
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **input_dyn** (`numpy 2D array, optional`) - input dynamic spectrum rather than using currently initialized one.
				*   **input_x** (`list or numpy 1D array, optional`) - time axis of the input dynamic spectrum.
				*   **input_y** (`list or numpy 1D array, optional`) - frequency or wavelength axis of the input dynamic spectrum.
				*   **trap** (`bool, optional`) - use trapezoidal dynamic spectrum.
				*   **window** (`{'hanning', 'hamming', 'blackman', 'bartlett'}, str, optional`) - numpy windowing method.
				*   **window_frac** (`float, optional`) - windowing fraction.
				*   **plot** (`bool, optional`) - option to plot the secondary spectrum.

.. raw:: html

	<code class="descname">fit_arc</code><span class="sig-paren">(</span><em>method='norm_sspec', asymm=False, plot=False, delmax=None, numsteps=1e4, startbin=3, cutmid=3, lamsteps=True, etamax=None, etamin=None, low_power_diff=-3, high_power_diff=-1.5, ref_freq=1400, constraint=[0, np.inf], nsmooth=5, filename=None, noise_error=True, display=True, log_parabola=False</em><span class="sig-paren">)</span>

\

        	Fit parabolic arc along peak power

		**Parameters:**
				*   **method** (`{'norm_sspec'}, str, optional`) - method for fitting the arc.
				*   **asymm** (`bool, optional`) - specifiy whether there is asymmetry in the spectrum  
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **numsteps** (`int, optional`) - number of steps along eta.
				*   **startbin** (`int, optional`) - Delay bin to start calculation at. Masks all preceding delay bins
				*   **cutmid** (`int, optional`) - number of doppler bins away from the center to mask 
				*   **etamax** (`float, optional`) - upper-bound for the arc curvature
				*   **etamin** (`float, optional`) - lower-bound for the arc curvature
				*   **low_power_diff** (`float, optional`) - parabola is fit to the peak power curve down to eta corresponding to this decrease in power.
				*   **high_power_diff** (`float, optional`) - parabola is fit to the peak power curve up to eta corresponding to this decrease in power.
				*   **ref_freq** (`float, optional`) - reference frequency in MHz used to convert arc curvature between units of :math:`\text{m}^{-1}/\text{mHz}^2` and :math:`\text{s}/\text{mHz}^2`.
				*   **constraint** (`length 2 list or tuple, optional`) - constrain the arc fitting to a curvature range [eta min, eta max].
				*   **nsmooth** (`int, optional`) - length of the filter window (i.e. the number of coefficients) for applying ``scipy.signal.savgol_filter`` to mean data. If used, must be a positive odd integer.
				*   **filename** (`str, optional`) - filename to save the plot as. If None then plot is not saved.
				*   **noise_error** (`bool, optional`) - get error from the noise in secondary spectra instead of integrated power profile.
				*   **display** (`bool, optional`) - option to display the plot.
				*   **log_parabola** (`bool, optional`) - fit logarithmic parabola to peak power curve in power spectrum.
				*   **plot** (`bool, optional`) - option to plot the secondary spectrum.


.. raw:: html

	<code class="descname">norm_sspec</code><span class="sig-paren">(</span><em>eta=None, delmax=None, plot=False, startbin=1, maxnormfac=5, minnormfac=0, cutmid=3, lamsteps=False, scrunched=True, plot_fit=True, ref_freq=1400, numsteps=None, filename=None, display=True, unscrunched=True, powerspec=False</em><span class="sig-paren">)</span>

\

        	Normalise :math:`f_t` axis using arc curvature

		**Parameters:**
				*   **eta** (`float, optional`) - arc curvature in units corresponding to entered value for ``lamsteps``
				*   **delmax** (`float, optional`) - maximum extent in delay to compute to. If None, computes over whole :math:`f_\tau` or :math:`f_\lambda`.
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **numsteps** (`int, optional`) - number of steps along eta.
				*   **startbin** (`int, optional`) - Delay bin to start calculation at. Masks all preceding delay bins
				*   **cutmid** (`int, optional`) - number of doppler bins away from the center to mask 
				*   **maxnormfac** (`float, optional`) - factor for normalizing :math:`f_t`
				*   **minnormfac** (`float, optional`) - threshold lower-bound for :math:`f_t`
				*   **scrunched** (`bool, optional`) - plots delay-scrunched "power profile"
				*   **plot_fit** (`bool, optional`) - overlay arc
				*   **ref_freq** (`float, optional`) - reference frequency in MHz used to convert arc curvature between units of :math:`\text{m}^{-1}/\text{mHz}^2` and :math:`\text{s}/\text{mHz}^2`.
				*   **unscrunched** (`bool, optional`) - plots unscrunched normalized secondary spectrum
				*   **powerspec** (`bool, optional`) - plots the power spectrum
				*   **filename** (`str, optional`) - filename to save the plot as. If None then plot is not saved.
				*   **display** (`bool, optional`) - option to display the plot.
				*   **plot** (`bool, optional`) - option to plot the secondary spectrum.

.. raw:: html

	<code class="descname">plot_sspec</code><span class="sig-paren">(</span><em>lamsteps=False, input_sspec=None, filename=None, input_x=None, input_y=None, trap=False, prewhite=True, plotarc=False, maxfdop=np.inf, delmax=None, ref_freq=1400, cutmid=0, startbin=0, display=True, colorbar=True, title=None</em><span class="sig-paren">)</span>

\

        	Plot the secondary spectrum

		**Parameters:**
				*   **delmax** (`float, optional`) - maximum extent in delay to compute to. If None, computes over whole :math:`f_\tau` or :math:`f_\lambda`.
				*   **input_sspec** (`numpy 2D array, optional`) - input secondary spectrum rather than use currently initialized one.
				*   **input_x** (`list or numpy 1D array, optional`) - :math:`f_t` axis of the input secondary spectrum.
				*   **input_y** (`list or numpy 1D array, optional`) - :math:`f_\tau` or :math:`f_\lambda` axis of the input secondary spectrum.
				*   **trap** (`bool, optional`) - use trapezoidal dynamic spectrum.
				*   **prewhite** (`bool, optional`) - apply pre-whitening and post-darkening.
				*   **plotarc** (`bool, optional`) - plot the fitted arc.
				*   **maxfdop** (`bool, optional`) - maximum :math:`f_t` to plot to
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **startbin** (`int, optional`) - Delay bin to start calculation at. Masks all preceding delay bins
				*   **cutmid** (`int, optional`) - number of doppler bins away from the center to mask 
				*   **ref_freq** (`float, optional`) - reference frequency in MHz used to convert arc curvature between units of :math:`\text{m}^{-1}/\text{mHz}^2` and :math:`\text{s}/\text{mHz}^2`.
				*   **filename** (`str, optional`) - filename to save the plot as. If None then plot is not saved.
				*   **display** (`bool, optional`) - option to display the plot.
				*   **colorbar** (`bool, optional`) - option to display a color bar alongside the plot.
				*   **title** (`bool, optional`) - title of the plot.

Scattered image
---------------

This class also contains methods to calculate and plot the physical scattered image of the pulsar.

.. raw:: html

	<code class="descname">calc_scat_im</code><span class="sig-paren">(</span><em>input_sspec=None, input_eta=None, input_x=None, input_y=None, sampling=64, lamsteps=False, trap=False, ref_freq=1400, clean=True, s=None, veff=None, d=None, fit_arc=True, plotarc=False, plot_fit=False, plot=False, plot_log=True, use_angle=False, use_spatial=False</em><span class="sig-paren">)</span>

\

        	Calculate the scattered image

		**Parameters:**
				*   **input_sspec** (`numpy 2D array, optional`) - input secondary spectrum rather than use currently initialized one.
				*   **input_eta** (`float, optional`) - input arc curvature in units corresponding to entered value for ``lamsteps``
				*   **input_x** (`list or numpy 1D array, optional`) - :math:`f_t` axis of the input secondary spectrum.
				*   **input_y** (`list or numpy 1D array, optional`) - :math:`f_\tau` or :math:`f_\lambda` axis of the input secondary spectrum.
				*   **trap** (`bool, optional`) - use trapezoidal dynamic spectrum.
				*   **sampling** (`int, optional`) - order of :math:`f_t` sampling.
				*   **fit_arc** (`bool, optional`) - fit an arc to the secondary spectrum.
				*   **plotarc** (`bool, optional`) - plot the fitted arc.
				*   **plot_fit** (`bool, optional`) - plot secondary spectrum with fitted arc overlayed
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **ref_freq** (`float, optional`) - reference frequency in MHz used to convert arc curvature between units of :math:`\text{m}^{-1}/\text{mHz}^2` and :math:`\text{s}/\text{mHz}^2`.
				*   **clean** (`bool, optional`) - fill in nans and zeros in the secondary spectrum.
				*   **s** (`float, optional`) - fractional screen distance. Must be in the range [0, 1].
				*   **veff** (`float, optional`) - the effective velocity during the observation in km/s.
				*   **d** (`float, optional`) - distance to the pulsar in kiloparsecs.
				*   **use_angle** (`bool, optional`) - use angle on the sky as the axes. Requires ``s`` and ``veff``.
				*   **use_spatial** (`bool, optional`) - use spatial distance at the location of the screen as the axes. Requires ``s``, ``veff``, and ``d``.
				*   **plot** (`bool, optional`) - plot the scattered image.
				*   **plot_log** (`bool, optional`) - plot the scattered image in log scale.

.. raw:: html

	<code class="descname">plot_scat_im</code><span class="sig-paren">(</span><em>display=True, plot_log=True, colorbar=True, title=None, input_scat_im=None, input_fdop=None, lamsteps=False, trap=False, clean=True, use_angle=False, use_spatial=False, s=None, veff=None, d=None, filename=None</em><span class="sig-paren">)</span>

\

        	Plot the scattered image

		**Parameters:**
				*   **input_scat_im** (`numpy 2D array, optional`) - input scattered image rather than use currently initialized one.
				*   **input_fdop** (`list or numpy 1D array, optional`) - :math:`f_t` axis of the input secondary spectrum.
				*   **trap** (`bool, optional`) - use trapezoidal dynamic spectrum.
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **clean** (`bool, optional`) - fill in nans and zeros in the secondary spectrum.
				*   **s** (`float, optional`) - fractional screen distance. Must be in the range [0, 1].
				*   **veff** (`float, optional`) - the effective velocity during the observation in km/s.
				*   **d** (`float, optional`) - distance to the pulsar in kiloparsecs.
				*   **use_angle** (`bool, optional`) - use angle on the sky as the axes. Requires ``s`` and ``veff``.
				*   **use_spatial** (`bool, optional`) - use spatial distance at the location of the screen as the axes. Requires ``s``, ``veff``, and ``d``.
				*   **plot_log** (`bool, optional`) - plot the scattered image in log scale.
				*   **filename** (`str, optional`) - filename to save the plot as. If None then plot is not saved.
				*   **display** (`bool, optional`) - option to display the plot.
				*   **colorbar** (`bool, optional`) - option to display a color bar alongside the plot.
				*   **title** (`bool, optional`) - title of the plot.

Other
-----

.. raw:: html

	<code class="descname">plot_all</code><span class="sig-paren">(</span><em>dyn=1, acf=2, sspec=3, norm_sspec=4, colorbar=True, lamsteps=False, filename=None, display=True</em><span class="sig-paren">)</span>

\

        	Plot the dynamic spectrum, ACF, secondary spectrum, and normalized secondary spectrum in one plot

		**Parameters:**
				*   **dyn** (`int, optional`) - position of the dynamic spectrum in the subplot
				*   **acf** (`int, optional`) - position of the ACF in the subplot
				*   **sspec** (`int, optional`) - position of the secondary spectrum in the subplot
				*   **norm_sspec** (`int, optional`) - position of the normalized secondary spectrum in the subplot
				*   **colorbar** (`bool, optional`) - option to display a color bar alongside the plot.
				*   **lamsteps** (`bool, optional`) - option to use wavelength steps instead of default frequency steps.
				*   **filename** (`str, optional`) - filename to save the plot as. If None then plot is not saved.
				*   **display** (`bool, optional`) - option to display the plot.

.. raw:: html

	<code class="descname">info</code><span class="sig-paren">(</span><span class="sig-paren">)</span>

\

		Print the dynamic spectrum information.

